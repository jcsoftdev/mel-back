generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// *
///  * ---------- Core models ----------
model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  roles     UserRole[]
}

model Role {
  id             String               @id @default(uuid())
  name           String               @unique
  createdAt      DateTime             @default(now())
  documentAccess RoleDocumentAccess[]
  sectionAccess  RoleSectionAccess[]
  userRoles      UserRole[]
}

model Section {
  id         String              @id @default(uuid())
  name       String
  createdAt  DateTime            @default(now())
  parentId   String?
  driveId    String?             @unique
  documents  Document[]
  roleGrants RoleSectionAccess[]
  parent     Section?            @relation("SectionChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children   Section[]           @relation("SectionChildren")

  @@unique([parentId, name])
  @@index([parentId])
  @@index([name])
  @@index([driveId])
}

model Document {
  id         String               @id @default(uuid())
  title      String
  url        String
  sectionId  String
  createdAt  DateTime             @default(now())
  driveId    String?              @unique
  section    Section              @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  roleGrants RoleDocumentAccess[]

  @@index([sectionId])
  @@index([driveId])
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model RoleSectionAccess {
  id        String  @id @default(uuid())
  roleId    String
  sectionId String
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([roleId, sectionId])
  @@index([roleId])
  @@index([sectionId])
}

model RoleDocumentAccess {
  id         String   @id @default(uuid())
  roleId     String
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, documentId])
  @@index([roleId])
  @@index([documentId])
}
