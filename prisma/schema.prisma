generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// *
///  * ---------- Core models ----------
model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  roles     UserRole[]
}

model Role {
  id             String               @id @default(uuid())
  name           String               @unique
  createdAt      DateTime             @default(now())
  documentAccess RoleDocumentAccess[]
  sectionAccess  RoleSectionAccess[]
  userRoles      UserRole[]
}

model Section {
  id         String              @id @default(uuid())
  name       String
  createdAt  DateTime            @default(now())
  parentId   String?
  driveId    String?             @unique
  documents  Document[]
  roleGrants RoleSectionAccess[]
  parent     Section?            @relation("SectionChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children   Section[]           @relation("SectionChildren")

  @@unique([parentId, name])
  @@index([parentId])
  @@index([name])
  @@index([driveId])
}

model Document {
  id         String               @id @default(uuid())
  title      String
  url        String
  sectionId  String
  createdAt  DateTime             @default(now())
  driveId    String?              @unique
  section    Section              @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  roleGrants RoleDocumentAccess[]

  @@index([sectionId])
  @@index([driveId])
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model RoleSectionAccess {
  id        String  @id @default(uuid())
  roleId    String
  sectionId String
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([roleId, sectionId])
  @@index([roleId])
  @@index([sectionId])
}

model RoleDocumentAccess {
  id         String   @id @default(uuid())
  roleId     String
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, documentId])
  @@index([roleId])
  @@index([documentId])
}

/// *
///  * ---------- Form Management models ----------
model Form {
  id          String           @id @default(uuid())
  title       String
  description String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  driveId     String?          @unique
  fields      FormField[]
  submissions FormSubmission[]

  @@index([title])
  @@index([isActive])
  @@index([driveId])
}

model FormField {
  id           String                @id @default(uuid())
  formId       String
  fieldType    FormFieldType
  label        String
  placeholder  String?
  isRequired   Boolean               @default(false)
  order        Int
  options      Json?                 // For select fields
  validation   Json?                 // Validation rules
  createdAt    DateTime              @default(now())
  form         Form                  @relation(fields: [formId], references: [id], onDelete: Cascade)
  submissions  FormSubmissionField[]

  @@unique([formId, order])
  @@index([formId])
  @@index([fieldType])
}

model FormSubmission {
  id          String                @id @default(uuid())
  formId      String
  submittedAt DateTime              @default(now())
  ipAddress   String?
  userAgent   String?
  form        Form                  @relation(fields: [formId], references: [id], onDelete: Cascade)
  fields      FormSubmissionField[]
  files       FileMetadata[]

  @@index([formId])
  @@index([submittedAt])
}

model FormSubmissionField {
  id           String         @id @default(uuid())
  submissionId String
  fieldId      String
  value        String?
  submission   FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  field        FormField      @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@unique([submissionId, fieldId])
  @@index([submissionId])
  @@index([fieldId])
}

model FileMetadata {
  id           String          @id @default(uuid())
  submissionId String
  fieldId      String
  originalName String
  fileName     String
  mimeType     String
  size         Int
  driveId      String          @unique
  driveUrl     String
  uploadedAt   DateTime        @default(now())
  submission   FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@index([fieldId])
  @@index([driveId])
}

enum FormFieldType {
  SELECT
  INPUT_TEXT
  INPUT_FILE
}
